#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

struct node {
    int data ;
    struct node *left;
    struct node *right;

};

struct node *createNode(int data)
{
    struct node *n = (struct node*)malloc(sizeof(struct node));
    n->data=data;
    n->left=NULL;
    n->right=NULL;
    return n;
}

 void preOrderTransversal(struct node *root)
 {
     if (root != NULL){
     printf(" %d",root->data);
     
     preOrderTransversal(root->left);
     preOrderTransversal(root->right);

     
    
     }
 }

 void postOrderTransversal(struct node *root)
 {
     if (root != NULL)
     {
    postOrderTransversal(root->left);
     postOrderTransversal(root->right);
     printf(" %d",root->data);
     }
 }


 void inOrderTransversal(struct node*root)
 {
     if (root != NULL)
     {
     inOrderTransversal(root->left);
     printf(" %d",root->data);
     inOrderTransversal(root->right);
     
     }
 }

void main()
{
    struct node *p = createNode(4);

    struct node *p1 = createNode(3);
    struct node *p2 = createNode(6);
    struct node *p3 = createNode(5);
    struct node *p4 = createNode(2);
    /* Binary tree
        4
       / \
      1   6
     / \
    5   2
    */ 
   p->left = p1;
   p->right= p2;
   p1->left = p3;
   p1->right = p4;
   
   
    preOrderTransversal(p);
    printf("\n");
    postOrderTransversal(p);
     printf("\n");
     inOrderTransversal(p);

}
